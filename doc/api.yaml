openapi: 3.0.3 
servers:
  - url: "http://localhost:3000/v1"
info:
  title: WASAText API
  description: WASAText - Messaging app API spec for WASA course
  version: "1.0.0"

tags:
  - name: login
    description: Endpoints for user login and authentication
  - name: profile
    description: Endpoints for editing user profile (name, photo)
  - name: conversations 
    description: Endpoints for listing and retrieving conversations
  - name: messages
    description: Endpoints for sending, commententing, forwarding and deleting messages
  - name: groups
    description: Endpoints for managing group membership and info

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              required: [name] 
              properties:
                name:
                  type: string
                  description: The name of the user to login/register
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    description: Unique identifier
                    example: "b3a1-3223-332-32"

  /me/username:
    put:
      tags: ["profile"]
      operationId: setMyUserName
      summary: Change user display name
      description: Change your display name
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload to update user's display name
              properties:
                name:
                  type: string
                  description: User's display name 
                  example: "NewName"
      responses:
        '200':
          description: Name changed successfully
          content:
            application/json:
              schema:
                type: object
                description: Response containing the update user display name
                properties:
                  name: 
                    type: string 
              example:
                name: "NewName"
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '400':
          $ref: '#/components/responses/BadRequest' 
 
  /me/photo:
    put:
      tags: ["profile"]
      operationId: setMyPhoto
      summary: Upload or update user profile photo 
      security: 
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: 
              type: object
              description: Payload containing user profile photo 
              properties:
                photo:
                  type: string 
                  format: binary
                  description: Profile image file to upload 
      responses:
        '200':
          description: Photo uploaded
          content:
            application/json:
              schema:
                type: object
                description: Confirmation of photo upload
                properties:
                  message:
                    type: string
                    description: Sucess message
                    example: "Photo uploaded"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound' 
        '400':
          $ref: '#/components/responses/BadRequest' 

  /conversations:
    post:
      tags: ["conversations"]
      operationId: createConversation
      summary: Create a new conversation
      description: Creates a direct or a group conversation.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  description: Conversation title or the other user's name
                  example: "Chat with Marco"
                isGroup:
                  type: boolean
                  description: Whether to create a group conversation
                  default: false
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: integer
                    description: Created conversation identifier
                    example: 93
                    minimum: 1
                    maximum: 100
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'

  /me/conversations:
    get:
      tags: ["conversations"]
      operationId: getMyConversations
      summary: Get all conversations for the current user
      description: Retrieve a list of conversations the current user is part of 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of conversations returned 
          content:
            application/json:
              schema:
                type: object
                description: List of user's conversations
                properties:
                  items:
                    type: object
                    description: A single conversation summary
                    properties:
                      id:
                        type: integer
                        description: Unique conversation identifier
                        example: 93
                        minimum: 1
                        maximum: 100
                      name:
                        type: string
                        description: Name/title of the conversation
                      lastMessageText:
                        type: string
                        nullable: true
                        description: Snippet of the latest message (if any)
                      lastMessageAt:
                        type: string
                        format: date-time
                        nullable: true
                        description: Timestamp of the latest message (if any)
                      photoUrl:
                        type: string
                        nullable: true
                        description: Conversation or participant photo URL 
                example:
                  - id: 2342
                    name: "Chat with Emanuele"
                    lastMessageText: "Ok, SEE YA"
                    lastMessageAt: "2025-08-15T21:12:03Z"
                    photoUrl: "https://example.com/u/11111.jpg"
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'
        '404': 
          $ref: '#/components/responses/NotFound'
        '400': 
          $ref: '#/components/responses/BadRequest'

  /user/{id}:
    get:
      tags: ["profile"]
      operationId: getUser
      summary: Get user public info by id
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User identifier
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5f5e1002-7b42-4e2e-bfbe-1a0a0c9b6e21"
                  name:
                    type: string
                    example: "Maria"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'
        '404': 
          $ref: '#/components/responses/NotFound'

  /conversations/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 34
            minimum: 1
            maximum: 100
          description: Unique identifier
      tags: ["conversations"]
      operationId: getConversation 
      summary: get full conversation by id
      description: return a conversation object w participants and messages
      security:
        - BearerAuth: []
      responses:
        '200':
          description: conversation returned 
          content:
            application/json:
              schema:
                type: object
                required: [id, participants, messages] 
                description: Unique identifier for the conversation
                properties:
                  id:
                    type: integer
                    example: 43
                    minimum: 1
                    maximum: 100
                    description: Conversation id 
                  participants:
                    type: array
                    minItems: 1
                    maxItems: 512
                    description: List of participants in the conversation
                    items: 
                      type: string
                      minLength: 1
                      maxLength: 64
                      description: Names of participants
                  messages:
                    type: array
                    minItems: 0
                    maxItems: 1000
                    description: List of messages
                    items:
                      type: object
                      description: Single message object
                      properties:
                        sender:
                          type: string
                          description: Name of the user who sent the message
                        text: 
                          type: string
                          description: text content
                        timestamp:
                          type: string
                          format: date-time
                          description: Time the message was sent

              example:
                id: 2
                participants: ["Marco", "Maria"]
                messages:
                  - sender: "Maria"
                    text: "Ciao"
                    timestamp: "1969-01-01T00:00:00Z"
        '401':
            $ref: '#/components/responses/Unauthorized'
        '404':
            $ref: '#/components/responses/NotFound'
        '400':
            $ref: '#/components/responses/BadRequest' 

  /conversations/{id}/messages:
    post:
      tags: ["messages"]
      operationId: sendMessage
      summary: Send a new message
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 43
            minimum: 1
            maximum: 100
          description: Unique identifier 
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Message content
                  example: "Hey, how you doin?"
                timestamp:
                  type: string
                  format: date-time
                  description: Timestamp of the message
                  example: "2000-01-01T00:00:00Z"
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: integer
                    example: 43
                    minimum: 1
                    maximum: 100000
                    description: Unique identifier 
                  status:
                    type: string
                    description: Result of the operation
              example:
                messageId: 4342
                status: "sent"
        '401':
            $ref: '#/components/responses/Unauthorized'
        '404':
            $ref: '#/components/responses/NotFound' 
        '400':
            $ref: '#/components/responses/BadRequest' 
  
  /messages:
    post:
      tags: ["messages"]
      operationId: sendDirectMessage
      summary: send a direct message (creates the 1–1 conversation if missing)
      description: sends a message to a user; if a 1–1 conversation between the caller and the recipient does not exist, it will be created automatically
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [toUserId, text]
              properties:
                toUserId:
                  type: string
                  description: Recipient user identifier
                  example: "12345-2343-23423"
                text:
                  type: string
                  description: Message content
                  example: "Hey, how you doin?"
      responses:
        '201':
          description: Message sent (conversation created if necessary)
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: integer
                    description: Conversation identifier
                    example: 43
                    minimum: 1
                    maximum: 100000
                  messageId:
                    type: integer
                    description: Created message identifier
                    example: 54332
                    minimum: 1
                    maximum: 100000
                  status:
                    type: string
                    example: "sent"
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '404':  
          $ref: '#/components/responses/NotFound'
        '400': 
          $ref: '#/components/responses/BadRequest'

  /messages/{id}/forward:
    post:
      tags: ["messages"]
      operationId: forwardMessage
      summary: Forward a message to another conversation
      description: Forward s a message identified by its ID to another conversation
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 43
            minimum: 1
            maximum: 100000
          description: Unique identifier of the resource
          
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: id of the destionation conversation
              required:
                - conversationId
              properties:
                conversationId:
                  type: integer
                  example: 43
                  minimum: 1
                  maximum: 100000
                  description: Unique identifier
      responses:
        '200':
          description: Message forwarded
          content:
            application/json:
              schema:
                type: object
                description: Response confirming forwarding result
                properties:
                  status:
                    type: string
                    description: Result of th operation
                    example: "Forwarded"
        '401':
            $ref: '#/components/responses/Unauthorized'
        '404':
            $ref: '#/components/responses/NotFound'
        '400':
            $ref: '#/components/responses/BadRequest'
 
  /messages/{id}/comments:
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier
        schema:
          type: integer
          example: 43
          minimum: 1
          maximum: 100000
    post:
      tags: ["messages"]
      operationId: commentMessage
      summary: Add a reaction to message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload containg the comment to add
              properties:
                comment:
                  type: string
                  description: Reaction to a message by emoji
                  example: "👍"

      responses:
        '200':
          description: Comment added
          content:
            application/json:
              schema:
                type: object
                description: Response containing the comment ID and status
                properties:
                  commentId:
                    type: integer
                    example: 43
                    minimum: 1
                    maximum: 100000
                    description: Unique identifier
                  status:
                    type: string 
                    description: Status of the operation 
              example:
                commentId: 42234
                status: "ok"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      tags: ["messages"]
      operationId: uncommentMessage
      summary: Remove a comment from a messsage
      security: 
        - BearerAuth: []
      responses:
          '200':
            description: Comment removed
            content:
              application/json:
                schema:
                  type: object
                  description: Payload containg the result
                  properties:
                    status:
                      type: string
                      description: Result of the delete operation
                      example: "removed"
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          '400':
            $ref: '#/components/responses/BadRequest'

  /messages/{id}:
    delete:
      tags: ["messages"]
      operationId: deleteMessage
      summary: Delete a message
      description: Permanently deletes the spec message
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 43
            minimum: 1
            maximum: 100000
          description: Unique identifier of the resource
      responses:
        '200':
          description: Message deleted
          content:
            application/json:
              schema:
                type: object
                description: Payload containg the result
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "deleted"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

  /groups/{id}/members:
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier
        schema:
          type: integer
          example: 43
          minimum: 1
          maximum: 100000
    post:
      tags: ["groups"]
      operationId: addToGroup
      summary: Add user to a group 
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: User object containing the ID to add to the group
              required:
                - userId
              properties:
                userId:
                  type: string 
                  description: Id of the user to add
                  example: "423424-454525"
      responses:
        '200':
          description: User added to a group
          content: 
            application/json:
              schema:
                type: object
                description: Payload 
                properties:
                  status:
                    type: string 
                    description: Status of the operation
                    example: "Added"
          
        '401':
            $ref: '#/components/responses/Unauthorized'
        '404':
            $ref: '#/components/responses/NotFound'
        '400':
            $ref: '#/components/responses/BadRequest'
    delete:
      tags: ["groups"]
      operationId: leaveGroup
      summary: Leave a group 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Left group
          content: 
            application/json:
              schema:
                type: object
                description: Payload
                properties:
                  status:
                    type: string 
                    description: Status of the operation
                    example: "Left"
        '401':
            $ref: '#/components/responses/Unauthorized'
        '404':
            $ref: '#/components/responses/NotFound'
        '400':
            $ref: '#/components/responses/BadRequest'

  /groups/{id}/name:
    put:
      tags: ["groups"]
      operationId: setGroupName
      summary: Change group name 
      security:
        - BearerAuth: []
      parameters:
        - name: id 
          in: path
          required: true
          description: Name to assing to the group
          schema:
            type: integer
            example: 43
            minimum: 1
            maximum: 100000
            description: Unique identifier of the resource
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              description: RB containg the new group name
              required:
                - name 
              properties:
                name:
                  type: string
                  description: New group name 
                  example: "Study group"    
      responses:
        '200':
          description: Group name updated
          content:
            application/json:
              schema:
                type: object
                description: The update group info
                properties:
                  name:
                    type: string
                    description: Update group name
                    example: "Study group"
        '401':
            $ref: '#/components/responses/Unauthorized'
        '404':
            $ref: '#/components/responses/NotFound'
        '400':
            $ref: '#/components/responses/BadRequest'

  /groups/{id}/photo:
    put:
      tags: ["groups"]
      operationId: setGroupPhoto
      summary: Change group photo 
      security: 
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                photo:
                  type: string 
                  format: binary
      parameters:
        - name: id 
          in: path
          required: true
          schema:
            type: integer
            example: 43
            minimum: 1
            maximum: 100000
          description: The group ID
      responses:
        '200':
          description: Group photo uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Photo uploaded"
        '401':
            $ref: '#/components/responses/Unauthorized'
        '404':
            $ref: '#/components/responses/NotFound'
        '400':
            $ref: '#/components/responses/BadRequest'

components:
  responses:
    Unauthorized:
      description: The access token is missing or it's expired
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not authorized"
    BadRequest:
      description: The request was not compliant with the documentation (e.g., missing fields, etc.)
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad request"
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not found"
    Forbidden:
      description: You are not allowed to perform this operation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Forbidden operation"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: userId
      description: Unique user identifier returned at login